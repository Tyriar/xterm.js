import { CharMeasure } from './utils/CharMeasure';
import { EventEmitter } from './EventEmitter';
import { ITerminal, ISelectionManager, IBuffer } from './Interfaces';
import { SelectionModel } from './SelectionModel';
export declare class SelectionManager extends EventEmitter implements ISelectionManager {
    private _terminal;
    private _buffer;
    private _rowContainer;
    private _charMeasure;
    protected _model: SelectionModel;
    private _dragScrollAmount;
    private _activeSelectionMode;
    private _dragScrollIntervalTimer;
    private _refreshAnimationFrame;
    private _enabled;
    private _mouseMoveListener;
    private _mouseUpListener;
    constructor(_terminal: ITerminal, _buffer: IBuffer, _rowContainer: HTMLElement, _charMeasure: CharMeasure);
    private _initListeners();
    disable(): void;
    enable(): void;
    setBuffer(buffer: IBuffer): void;
    readonly selectionStart: [number, number];
    readonly selectionEnd: [number, number];
    readonly hasSelection: boolean;
    readonly selectionText: string;
    clearSelection(): void;
    refresh(isNewSelection?: boolean): void;
    private _refresh();
    selectAll(): void;
    private _onTrim(amount);
    private _getMouseBufferCoords(event);
    private _getMouseEventScrollAmount(event);
    private _onMouseDown(event);
    private _addMouseDownListeners();
    private _removeMouseDownListeners();
    private _onIncrementalClick(event);
    private _onSingleClick(event);
    private _onDoubleClick(event);
    private _onTripleClick(event);
    private _onMouseMove(event);
    private _dragScroll();
    private _onMouseUp(event);
    private _convertViewportColToCharacterIndex(bufferLine, coords);
    setSelection(col: number, row: number, length: number): void;
    private _getWordAt(coords);
    protected _selectWordAt(coords: [number, number]): void;
    private _selectToWordAt(coords);
    private _isCharWordSeparator(char);
    protected _selectLineAt(line: number): void;
}
