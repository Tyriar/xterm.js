import { BufferSet } from './BufferSet';
import { Buffer } from './Buffer';
import { EventEmitter } from './EventEmitter';
import { SelectionManager } from './SelectionManager';
import { CharMeasure } from './utils/CharMeasure';
import { CustomKeyEventHandler, Charset, LinkMatcherHandler, LinkMatcherValidationCallback, CharData, LineData, StringOption, BooleanOption, StringArrayOption, NumberOption, GeometryOption, HandlerOption } from './Types';
import { ITerminal, IBrowser, ITerminalOptions, IInputHandlingTerminal, ILinkMatcherOptions, IViewport } from './Interfaces';
export declare class Terminal extends EventEmitter implements ITerminal, IInputHandlingTerminal {
    textarea: HTMLTextAreaElement;
    element: HTMLElement;
    rowContainer: HTMLElement;
    private parent;
    private context;
    private document;
    private body;
    private viewportScrollArea;
    private viewportElement;
    selectionContainer: HTMLElement;
    private helperContainer;
    private compositionView;
    private charSizeStyleElement;
    browser: IBrowser;
    options: ITerminalOptions;
    private colors;
    cursorState: number;
    cursorHidden: boolean;
    convertEol: boolean;
    private sendDataQueue;
    private customKeyEventHandler;
    private cursorBlinkInterval;
    applicationKeypad: boolean;
    applicationCursor: boolean;
    originMode: boolean;
    insertMode: boolean;
    wraparoundMode: boolean;
    charset: Charset;
    gcharset: number;
    glevel: number;
    charsets: Charset[];
    private decLocator;
    x10Mouse: boolean;
    vt200Mouse: boolean;
    private vt300Mouse;
    normalMouse: boolean;
    mouseEvents: boolean;
    sendFocus: boolean;
    utfMouse: boolean;
    sgrMouse: boolean;
    urxvtMouse: boolean;
    children: HTMLElement[];
    private refreshStart;
    private refreshEnd;
    savedCols: number;
    private readable;
    private writable;
    defAttr: number;
    curAttr: number;
    params: (string | number)[];
    currentParam: string | number;
    prefix: string;
    postfix: string;
    writeBuffer: string[];
    private writeInProgress;
    private xoffSentToCatchUp;
    private writeStopped;
    private surrogate_high;
    private userScrolling;
    private inputHandler;
    private parser;
    private renderer;
    selectionManager: SelectionManager;
    private linkifier;
    buffers: BufferSet;
    buffer: Buffer;
    viewport: IViewport;
    private compositionHelper;
    charMeasure: CharMeasure;
    cols: number;
    rows: number;
    geometry: [number, number];
    constructor(options?: ITerminalOptions);
    private setup();
    eraseAttr(): number;
    focus(): void;
    getOption(key: StringOption): string;
    getOption(key: BooleanOption): boolean;
    getOption(key: StringArrayOption): number[];
    getOption(key: NumberOption): number;
    getOption(key: GeometryOption): [number, number];
    getOption(key: HandlerOption): (data: string) => void;
    setOption(key: StringOption, value: string): void;
    setOption(key: BooleanOption, value: boolean): void;
    setOption(key: StringArrayOption, value: number[]): void;
    setOption(key: NumberOption, value: number): void;
    setOption(key: GeometryOption, value: [number, number]): void;
    setOption(key: HandlerOption, value: (data: string) => void): void;
    private restartCursorBlinking();
    private setCursorBlinking(enabled);
    private clearCursorBlinkingInterval();
    private bindFocus();
    private blur();
    private bindBlur();
    private initGlobal();
    private bindKeys();
    private insertRow(row?);
    open(parent: HTMLElement): void;
    static loadAddon(addon: string, callback?: Function): boolean | any;
    updateCharSizeStyles(): void;
    bindMouse(): void;
    destroy(): void;
    refresh(start: number, end: number): void;
    private queueLinkification(start, end);
    showCursor(): void;
    scroll(isWrapped?: boolean): void;
    scrollDisp(disp: number, suppressScrollEvent?: boolean): void;
    scrollPages(pageCount: number): void;
    scrollToTop(): void;
    scrollToBottom(): void;
    write(data: string): void;
    private innerWrite();
    writeln(data: string): void;
    attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void;
    setHypertextLinkHandler(handler: LinkMatcherHandler): void;
    setHypertextValidationCallback(callback: LinkMatcherValidationCallback): void;
    registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options: ILinkMatcherOptions): number;
    deregisterLinkMatcher(matcherId: number): void;
    hasSelection(): boolean;
    getSelection(): string;
    clearSelection(): void;
    selectAll(): void;
    protected _keyDown(ev: KeyboardEvent): boolean;
    protected _evaluateKeyEscapeSequence(ev: KeyboardEvent): {
        cancel: boolean;
        key: string;
        scrollDisp: number;
    };
    setgLevel(g: number): void;
    setgCharset(g: number, charset: Charset): void;
    protected _keyPress(ev: KeyboardEvent): boolean;
    send(data: string): void;
    bell(): void;
    log(text: string, data?: any): void;
    error(text: string, data?: any): void;
    resize(x: number, y: number): void;
    updateRange(y: number): void;
    maxRange(): void;
    setupStops(i?: number): void;
    prevStop(x?: number): number;
    nextStop(x?: number): number;
    eraseRight(x: number, y: number): void;
    eraseLeft(x: number, y: number): void;
    clear(): void;
    eraseLine(y: number): void;
    blankLine(cur?: boolean, isWrapped?: boolean, cols?: number): LineData;
    ch(cur?: boolean): CharData;
    is(term: string): boolean;
    handler(data: string): void;
    private handleTitle(title);
    index(): void;
    reverseIndex(): void;
    reset(): void;
    private tabSet();
    cancel(ev: Event, force?: boolean): boolean;
    matchColor(r1: number, g1: number, b1: number): number;
}
